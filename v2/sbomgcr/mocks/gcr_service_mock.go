// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	google "github.com/google/go-containerregistry/pkg/v1/google"
	mock "github.com/stretchr/testify/mock"

	name "github.com/google/go-containerregistry/pkg/name"

	testing "testing"

	v1 "github.com/google/go-containerregistry/pkg/v1"
)

// GCRService is an autogenerated mock type for the GCRService type
type GCRService struct {
	mock.Mock
}

// ListTags provides a mock function with given fields: ctx, repo
func (_m *GCRService) ListTags(ctx context.Context, repo name.Repository) (*google.Tags, error) {
	ret := _m.Called(ctx, repo)

	var r0 *google.Tags
	if rf, ok := ret.Get(0).(func(context.Context, name.Repository) *google.Tags); ok {
		r0 = rf(ctx, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.Tags)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, name.Repository) error); ok {
		r1 = rf(ctx, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PullImage provides a mock function with given fields: src
func (_m *GCRService) PullImage(src string) (v1.Image, error) {
	ret := _m.Called(src)

	var r0 v1.Image
	if rf, ok := ret.Get(0).(func(string) v1.Image); ok {
		r0 = rf(src)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGCRService creates a new instance of GCRService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewGCRService(t testing.TB) *GCRService {
	mock := &GCRService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
